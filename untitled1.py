# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SgYipyBEoGgu9njCMeOZb9w3OqYJUoeR
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas_datareader as data

plt.style.use('fivethirtyeight')
# %matplotlib inline

!pip install yfinance tensorflow scikit-learn

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# Fetch stock data
def get_stock_data(stock_symbol, start_date, end_date):
    stock = yf.download(stock_symbol, start=start_date, end=end_date)
    return stock[['Close']]

# Define stock and time period
stock_symbol = 'AAPL'  # Change this to any stock ticker
start_date = '2015-01-01'
end_date = '2025-01-01'
data = get_stock_data(stock_symbol, start_date, end_date)

# Plot stock prices
plt.figure(figsize=(10,5))
plt.plot(data, label=f'{stock_symbol} Closing Price')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

# Normalize data
scaler = MinMaxScaler(feature_range=(0,1))
data_scaled = scaler.fit_transform(data)

# Prepare data for LSTM
X, y = [], []
time_steps = 60
for i in range(time_steps, len(data_scaled)):
    X.append(data_scaled[i-time_steps:i, 0])
    y.append(data_scaled[i, 0])
X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Build LSTM model
model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)),
    Dropout(0.2),
    LSTM(50, return_sequences=False),
    Dropout(0.2),
    Dense(25),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')

# Train model
model.fit(X, y, epochs=25, batch_size=32)

# Predict next 30 days (placeholder, to be improved later)
predicted_prices = model.predict(X[-30:])
predicted_prices = scaler.inverse_transform(predicted_prices)

# Plot predictions
plt.figure(figsize=(10,5))
plt.plot(data.index[-30:], data['Close'].iloc[-30:], label='Actual Prices', color='blue')
plt.plot(data.index[-30:], predicted_prices, label='Predicted Prices', color='red')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout


def get_stock_data(stock_symbol, start_date, end_date):
    stock = yf.download(stock_symbol, start=start_date, end=end_date)
    return stock[['Close']]


use_list = input("Do you want to use a predefined stock list? (yes/no): ").strip().lower() == 'yes'

if use_list:
    stock_symbols = [
        'AAPL', 'GOOGL', 'MSFT', 'TSLA', 'NVDA', 'AMZN', 'META',  # Tech Stocks
        'JPM', 'GS', 'BAC',  # Finance Stocks
        'JNJ', 'PFE', 'MRNA',  # Healthcare & Pharma
        'F', 'GM',  # Automobile Stocks
        'XOM', 'CVX',  # Energy & Oil Stocks
        'WMT', 'COST', 'NKE'  # Consumer & Retail Stocks
    ]
else:
    stock_symbol = input("Enter stock ticker symbol: ").strip().upper()
    stock_symbols = [stock_symbol]

start_date = '2015-01-01'
end_date = '2025-01-01'

def process_stock(stock_symbol):
    print(f"Processing {stock_symbol}...")
    data = get_stock_data(stock_symbol, start_date, end_date)


    plt.figure(figsize=(10,5))
    plt.plot(data, label=f'{stock_symbol} Closing Price')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.show()


    scaler = MinMaxScaler(feature_range=(0,1))
    data_scaled = scaler.fit_transform(data)


    X, y = [], []
    time_steps = 60
    for i in range(time_steps, len(data_scaled)):
        X.append(data_scaled[i-time_steps:i, 0])
        y.append(data_scaled[i, 0])
    X, y = np.array(X), np.array(y)
    X = np.reshape(X, (X.shape[0], X.shape[1], 1))

    model = Sequential([
        LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)),
        Dropout(0.2),
        LSTM(50, return_sequences=False),
        Dropout(0.2),
        Dense(25),
        Dense(1)
    ])

    model.compile(optimizer='adam', loss='mean_squared_error')

    # Train model
    model.fit(X, y, epochs=25, batch_size=32, verbose=1)

    # Predict next 30 days (placeholder, to be improved later)
    predicted_prices = model.predict(X[-30:])
    predicted_prices = scaler.inverse_transform(predicted_prices)


    plt.figure(figsize=(10,5))
    plt.plot(data.index[-30:], data['Close'].iloc[-30:], label='Actual Prices', color='blue')
    plt.plot(data.index[-30:], predicted_prices, label='Predicted Prices', color='red')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.show()


for stock in stock_symbols:
    process_stock(stock)

model.save('stock_prediction_model.h5')
from google.colab import files
files.download('stock_prediction_model.h5')